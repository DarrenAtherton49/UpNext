apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"

android {

    signingConfigs {
        UpNextRelease {
            def keystorePropertiesFile = rootProject.file("keystore.properties")
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    def appConfig = rootProject.appConfig
    compileSdkVersion appConfig.compileSdkVersion
    buildToolsVersion appConfig.buildToolsVersion

    defaultConfig {
        applicationId appConfig.applicationId
        minSdkVersion appConfig.minSdkVersion
        targetSdkVersion appConfig.targetSdkVersion
        versionCode appConfig.versionCode
        versionName appConfig.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        resConfigs "en"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.UpNextRelease
        }
    }
    buildTypes.each {
        it.buildConfigField 'String', 'TMDB_API_KEY', tmdb_api_key
    }
    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    def dependencies = rootProject.appDependencies
    def testDependencies = rootProject.testDependencies
    implementation dependencies.appCompat
    implementation dependencies.constraintLayout
    implementation dependencies.dagger
    implementation dependencies.glide
    implementation dependencies.kotlin
    implementation dependencies.kotlinReflect
    implementation dependencies.lifecycleExtensions
    implementation dependencies.material
    implementation dependencies.moshi
    implementation dependencies.moshiKotlin
    implementation dependencies.navigationFragmentKTX
    implementation dependencies.navigationUiKTX
    implementation dependencies.okHttpLoggingInterceptor
    implementation dependencies.recyclerView
    implementation dependencies.retrofit
    implementation dependencies.retrofitMoshiConverter
    implementation dependencies.retrofitRxJava2Adapter
    implementation dependencies.roomRuntime
    implementation dependencies.roomRxJava2
    implementation dependencies.roxie
    implementation dependencies.rxAndroid
    implementation dependencies.rxJava2
    implementation dependencies.rxKotlin
    implementation dependencies.rxRelay
    implementation dependencies.timber

    kapt dependencies.daggerCompiler
    kapt dependencies.glideCompiler
    kapt dependencies.lifecycleCompiler
    kapt dependencies.roomCompiler

    debugImplementation dependencies.leakCanary
    debugImplementation dependencies.leakCanaryFragments
    releaseImplementation dependencies.leakCanaryNoOp

    testImplementation testDependencies.junit
    testImplementation testDependencies.mockito
    androidTestImplementation testDependencies.espressoCore
    androidTestImplementation testDependencies.espressoContrib
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}
